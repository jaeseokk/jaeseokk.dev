{"data":{"site":{"siteMetadata":{"title":"jaeseokk.log","author":"Jaeseok Kang"}},"markdownRemark":{"id":"f71a1ae7-e183-5b36-aa3a-1f44b5a089bf","excerpt":"action redux에서 state의 변경을 일으키는 이벤트를 의미 javascript pure object로 표현됨 비동기 action 대표적으로 data fetch 어떠한 작업이 완료되기를 기다렸다가( ) 특정 action을 dispatch 어떤 action이 dispatch…","html":"<h2>action</h2>\n<ul>\n<li>redux에서 state의 변경을 일으키는 이벤트를 의미</li>\n<li>javascript pure object로 표현됨</li>\n</ul>\n<h2>비동기 action</h2>\n<ul>\n<li>대표적으로 data fetch</li>\n<li>어떠한 작업이 완료되기를 기다렸다가(<code class=\"language-text\">Promise</code>) 특정 action을 dispatch</li>\n<li>어떤 action이 dispatch 되기를 기다렸다가 또 다른 action을 dispatch</li>\n</ul>\n<h2>비동기 처리를 어떻게 다룰 것인가</h2>\n<h3>With <a href=\"https://github.com/gaearon/redux-thunk\">redux-thunk</a></h3>\n<blockquote>\n<p>actionCreator가 비동기적으로 action을 dispatch하는 함수를 반환 할 수 있다면?</p>\n</blockquote>\n<ul>\n<li>\n<p>thunk란?</p>\n<ul>\n<li>\n<p>어떠한 표현식의 evaluation을 지연시키기 위해서 wrapping한 함수</p>\n</li>\n<li>\n<p><a href=\"https://github.com/gaearon/redux-thunk#whats-a-thunk\">https://github.com/gaearon/redux-thunk#whats-a-thunk</a></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// calculation of 1 + 2 is immediate</span>\n<span class=\"token comment\">// x === 3</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\n<span class=\"token comment\">// calculation of 1 + 2 is delayed</span>\n<span class=\"token comment\">// foo can be called later to perform the calculation</span>\n<span class=\"token comment\">// foo is a thunk!</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">redux-thunk</code>가 하는일</p>\n<ul>\n<li>pure javascript object 형태로 action을 반환하던 actionCreator에서 함수로 래핑한 형태로 반환 가능하게 함</li>\n<li>actionCreator가 함수를 반환하는데, 이 함수는 <code class=\"language-text\">dispatch</code>와 <code class=\"language-text\">getState</code>를 파라미터로 갖고 내부에서 비동기적으로 action을 dispatch 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT_COUNTER</span> <span class=\"token operator\">=</span> <span class=\"token string\">'INCREMENT_COUNTER'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token constant\">INCREMENT_COUNTER</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">incrementAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> dispatch <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Yay! Can invoke sync or async actions with `dispatch`</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">redux-thunk</code>에 대한 좀 더 심층적인 설명</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559\">참고</a></li>\n</ul>\n</li>\n<li>\n<p>좀 더 복잡한 비동기 처리에 대한 고민</p>\n<ul>\n<li>non-blocking 호출</li>\n<li>동시성 처리</li>\n<li>ex) 여러 비동기 어떤 action에 대한 비동기적인 응답이 완료되지 않았을때 새로운 action이 dispatch 되면 어떻게 처리해야하나?</li>\n</ul>\n</li>\n</ul>\n<h3>With <a href=\"https://github.com/redux-saga/redux-saga\">redux-saga</a></h3>\n<blockquote>\n<p>action들의 처리를 하나의 task로 정의하고, 그 task에 추상화된 effect를 이용하여 서술적으로 구현할 수 있다면?</p>\n</blockquote>\n<ul>\n<li>\n<p>redux-saga</p>\n<ul>\n<li>애플리케이션에서 사이드 이펙트만을 담당하는 별도의 쓰레드(같은 것?)가 존재 -> saga</li>\n<li><code class=\"language-text\">redux-saga</code>는 <code class=\"language-text\">redux</code>의 middleware로써 어떠한 action에 의해 saga가 실행, 정지, 취소 등의 동작을 할 수 있게 함</li>\n<li>saga내에서 state 접근, 또 다른 action의 dispatch 역시 가능</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">generator function(<code class=\"language-text\">function*</code>)</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  statements\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>generator function 호출시 즉시 실행 되지 않고 함수를 위한 iterator object가 반환</li>\n<li>iterator의 <code class=\"language-text\">next()</code> method가 실행되면 <code class=\"language-text\">yield</code> keyword를 포함한 표현식을 만날 때까지 진행되고 해당 표현식이 가리키는 값이 반환</li>\n<li>또 다시 <code class=\"language-text\">next()</code> method가 호출되면 정지했던 부분부터 다시 <code class=\"language-text\">yield</code> 표현식으로 만날때까지 실행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">idMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> index<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">idMaker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<ul>\n<li>saga task는 위와 같은 generator function으로 구현됨</li>\n</ul>\n</li>\n<li>\n<p>여러가지 effect(saga를 서술 하기 위한 도구)</p>\n<ul>\n<li><code class=\"language-text\">select</code>: state로부터 필요한 데이터를 꺼낸다.</li>\n<li><code class=\"language-text\">put</code>: action을 dispatch한다.</li>\n<li><code class=\"language-text\">take</code>: action을 기다린다. 이벤트의 발생을 기다린다.</li>\n<li><code class=\"language-text\">call</code>: Promise의 완료를 기다린다.</li>\n<li><code class=\"language-text\">fork</code>: 다른 task를 시작한다.</li>\n<li><code class=\"language-text\">join</code>: 다른 task의 종료를 기다린다.</li>\n<li>…</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">redux-saga</code>를 이용한 비동기 처리 예제</p>\n<ul>\n<li>api 호출</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fork<span class=\"token punctuation\">,</span> take<span class=\"token punctuation\">,</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga/effects'</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FETCH_REQUESTED'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2. take effect로 FETCH_REQUESTED action을 기다림</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Api<span class=\"token punctuation\">.</span>fetchUser<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3. FETCH_REQUEST action이 dispatch 된 후 call effect로 Api.fetchUser 함수를 통해 api 호출, 응답을 기다림</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_SUCCEEDED'</span><span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4-1. 호출 응답이 성공적으로 완료 되면 put effect로 FETCH_SUCCEEDED action을 dispatch</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_FAILED'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4-2. 호출 응답이 실패하면 put effect로 FETCH_FAILED action을 dispatch</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">rootSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>fetchData<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1. fork effect로 fetchData Task 시작</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>동시성 처리</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fork<span class=\"token punctuation\">,</span> take<span class=\"token punctuation\">,</span> call<span class=\"token punctuation\">,</span> put<span class=\"token punctuation\">,</span> cancel <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga/effects'</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Api<span class=\"token punctuation\">.</span>fetchUser<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5. call effect로 Api.fetchUser 함수를 통해 api 호출, 응답을 기다림</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_SUCCEEDED'</span><span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6-1. 호출 응답이 성공적으로 완료 되면 put effect로 FETCH_SUCCEEDED action을 dispatch</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_FAILED'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 6-2. 호출 응답이 실패하면 put effect로 FETCH_FAILED action을 dispatch</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> lastTask\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FETCH_REQUESTED'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2. take effect로 FETCH_REQUESTED action을 기다림</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span>lastTask<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3. FETCH_REQUESTED action이 완료 되고 (아직 완료되지 않은 task가 있다면) cancel effect로 해당 task를 취소</span>\n    <span class=\"token punctuation\">}</span>\n    lastTask <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>callApi<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4. fork effect로 callApi task를 실행</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">rootSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span>fetchData<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1. fork effect로 fetchData Task 시작</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>고수준으로 추상화된 helper 함수도 제공</p>\n<ul>\n<li><code class=\"language-text\">takeEvery</code>, <code class=\"language-text\">takeLatest</code>, …</li>\n<li>헬퍼함수를 사용한 동시성 처리 예제</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put<span class=\"token punctuation\">,</span> takeLatest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga/effects'</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Api<span class=\"token punctuation\">.</span>fetchUser<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2. FETCH_REQUEST action이 dispatch 된 후 call effect로 Api.fetchUser 함수를 통해 api 호출, 응답을 기다림</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_SUCCEEDED'</span><span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3-1. 호출 응답이 성공적으로 완료 되면 put effect로 FETCH_SUCCEEDED action을 dispatch</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_FAILED'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3-2. 호출 응답이 실패하면 put effect로 FETCH_FAILED action을 dispatch</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">rootSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FETCH_REQUEST'</span><span class=\"token punctuation\">,</span> fetchData<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1. FETCH_REQUEST action을 기다린다. task가 아직 완료 되지 않았을 경우 기존 task를 취소하고 새로운 task를 시작한다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>그 외 <code class=\"language-text\">redux-saga</code>를 이용하여 처리 가능한(할 것 같은..) 구현들</p>\n<ul>\n<li>api 호출 retry</li>\n<li>api 요청 throttling</li>\n<li>…</li>\n</ul>\n</li>\n<li>\n<p>Test</p>\n<ul>\n<li>TODO</li>\n</ul>\n</li>\n</ul>\n<h2>참고</h2>\n<ul>\n<li><a href=\"http://redux.js.org/docs/advanced/AsyncActions.html\">http://redux.js.org/docs/advanced/AsyncActions.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559\">https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559</a></li>\n<li><a href=\"https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559\">https://redux-saga.js.org/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559\">https://github.com/reactkr/learn-react-in-korean/blob/master/translated/deal-with-async-process-by-redux-saga.md</a></li>\n</ul>","frontmatter":{"title":"redux 비동기 action 처리","date":"January 12, 2018","description":null}}},"pageContext":{"slug":"/2018-01-12-redux 비동기 action 처리/","previous":null,"next":{"fields":{"slug":"/2018-01-21-코드-재사용을-통한-React-component-구현/"},"frontmatter":{"title":"HOC, Render props와 함께 개선된 React component 구현하기"}}}}